AWSTemplateFormatVersion: 2010-09-09
Outputs:
  API:
    Description: API for SNOW interraction
    Value: !Ref ServiceNowAPI
  BackendFunction:
    Description: Function receiving and parsing Output REST message from SNOW
    Value: !Ref BackendLambda
Parameters:
  LambdaBackendKey:
    Default: /path/to/api.zip
    MinLength: 1
    Type: String
    Description: Full path of the backend lambda function in the S3 bucket
    MaxLength: 127
  SNOWPassword:
    MinLength: 1
    Type: String
    Description: password of a valid SNOW API user
    MaxLength: 127
  SNOWInstance:
    MinLength: 1
    Type: String
    Description: Name of the ServiceNow instance
    MaxLength: 127
  APIUser:
    MinLength: 1
    Type: String
    Description: >-
      login to authenticate in API Gateway, must be in a SNOW Basic Auth
      Configuration element
    MaxLength: 127
  APIPassword:
    MinLength: 1
    Type: String
    Description: >-
      password to authenticate in API Gateway, must be in a SNOW Basic Auth
      Configuration element
    MaxLength: 127
  SNOWUser:
    MinLength: 1
    Type: String
    Description: login of a valid SNOW API user
    MaxLength: 127
  LambdaBackendBucket:
    MinLength: 1
    Type: String
    Description: Name of the S3 bucket where is the located backend lambda
    MaxLength: 127
  SNOWSecret:
    MinLength: 1
    Type: String
    Description: ServiceNow Client Secret to call the API
    MaxLength: 127
  SNOWID:
    MinLength: 1
    Type: String
    Description: ServiceNow ClientID to call the API
    MaxLength: 127
Description: Backend to interact with ServiceNow
Resources:
  AuthorizerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaBackendBucket
        S3Key: authorizer.zip
      Description: API Gateway Basic http authorizer
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
      MemorySize: 128
      Environment:
        Variables:
          LOGIN: !Ref APIUser
          PASWD: !Ref APIPassword
      Handler: authorizer.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 3
      Runtime: nodejs6.10
  ServiceNowAPIprodStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ServiceNowAPIDeployment7f0c900e95
      RestApiId: !Ref ServiceNowAPI
      StageName: prod
  ConfigLambdaPermissionAPI:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref BackendLambda
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ServiceNowAPI
          - /*/POST/
  ServiceNowAPIDeployment7f0c900e95:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ServiceNowAPI
      Description: 'RestApi deployment id: 7f0c900e95922b412e4d834546e9e3101523ceb5'
      StageName: Stage
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      Policies:
        - PolicyName: cloudwatchLogging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
  ServiceNowAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: ServiceNowAPI
        paths:
          /:
            post:
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              security:
                - snow_lamb: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                responses:
                  default:
                    statusCode: '200'
                uri: !Join 
                  - ''
                  - - 'arn:aws:apigateway:'
                    - !Ref 'AWS::Region'
                    - ':lambda:path/2015-03-31/functions/'
                    - !GetAtt BackendLambda.Arn
                    - /invocations
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: >
                    ##  See
                    http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html

                    ##  This template will pass through all parameters including
                    path, querystring, header, stage variables, and context
                    through to the integration endpoint via the body/payload

                    #set($allParams = $input.params())

                    {

                    "body-json" : $input.json('$'),

                    "params" : {

                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end

                    },

                    "stage-variables" : {

                    #foreach($key in $stageVariables.keySet())

                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end

                    },

                    "context" : {
                        "account-id" : "$context.identity.accountId",
                        "api-id" : "$context.apiId",
                        "api-key" : "$context.identity.apiKey",
                        "authorizer-principal-id" : "$context.authorizer.principalId",
                        "caller" : "$context.identity.caller",
                        "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                        "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                        "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                        "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                        "http-method" : "$context.httpMethod",
                        "stage" : "$context.stage",
                        "source-ip" : "$context.identity.sourceIp",
                        "user" : "$context.identity.user",
                        "user-agent" : "$context.identity.userAgent",
                        "user-arn" : "$context.identity.userArn",
                        "request-id" : "$context.requestId",
                        "resource-id" : "$context.resourceId",
                        "resource-path" : "$context.resourcePath"
                        }
                    }
                type: aws
              consumes:
                - application/json
              produces:
                - application/json
        schemes:
          - https
        x-amazon-apigateway-gateway-responses:
          UNAUTHORIZED:
            responseParameters:
              gatewayresponse.header.WWW-Authenticate: '''Basic'''
            responseTemplates:
              application/json: '{"message":$context.error.messageString}'
            statusCode: 401
        basePath: /prod
        securityDefinitions:
          snow_lamb:
            x-amazon-apigateway-authtype: custom
            type: apiKey
            name: Authorization
            x-amazon-apigateway-authorizer:
              type: request
              authorizerResultTtlInSeconds: 0
              identitySource: method.request.header.Authorization
              authorizerUri: !Join 
                - ''
                - - 'arn:aws:apigateway:'
                  - !Ref 'AWS::Region'
                  - ':lambda:path/2015-03-31/functions/'
                  - !GetAtt AuthorizerLambda.Arn
                  - /invocations
            in: header
        definitions:
          Empty:
            type: object
            title: Empty Schema
        swagger: '2.0'
  ConfigLambdaPermissionAuth:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref AuthorizerLambda
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ServiceNowAPI
          - /authorizers/*
  BackendLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref LambdaBackendBucket
        S3Key: !Ref LambdaBackendKey
      Description: 'Get request from SNOW, process and update'
      Tags:
        - Value: SAM
          Key: 'lambda:createdBy'
      MemorySize: 128
      Environment:
        Variables:
          Instance: !Ref SNOWInstance
          psswd: !Ref SNOWPassword
          secret: !Ref SNOWSecret
          clientid: !Ref SNOWID
          user: !Ref SNOWUser
      Handler: api.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 3
      Runtime: python3.6
